; Descripción: Verificar si en una fila hay 4 piezas juntas del mismo color para ganar.
; Dom: Board (board).
; Rec: int (1 si gana jugador 1, 2 si gana jugador 2, 0 si no hay ganador vertical).
; Tipo recursión: Natural.

; Función para revisar la victoria horizontal, o sea, 4 piezas en una fila.
(define (board-check-horizontal-win board)
  ; Función para revisar cada fila y ver si hay win.
  (define (check-fila board contador)
    (if (= contador 6)
        0 ; Aún no se gana horizontal
        (if (not (= (fila-contador (list-ref board contador)) 0))
            (fila-contador (list-ref board contador)) ; Retorna el ganador.
            (check-fila board (+ contador 1))
            )
        )
    )
  
  ; Función para ver si hay victoria en la fila.
  (define (fila-contador fila)
    (if (< (length fila) 4)
        0  ; Si tiene menos de 4 piezas, no hay victoria horizontal.
        (check-4-piezas fila 0)
        )
    )
  
  ; Función para verificar 4 piezas iguales en una fila.
  (define (check-4-piezas fila posicion)
    (if (> (+ posicion 3) (- (length fila) 1))
        0 ; No hay 4 piezas juntas.
        (if (and (= (list-ref fila posicion) (list-ref fila (+ posicion 1)))
                 (= (list-ref fila (+ posicion 1)) (list-ref fila (+ posicion 2)))
                 (= (list-ref fila (+ posicion 2)) (list-ref fila (+ posicion 3)))
                 (not (= (list-ref fila posicion) 0)))  ; Verificar que no sean espacios vacíos.
            (list-ref fila posicion)  ; Retorna el jugador que ganó (1 o 2).
            (check-4-piezas fila (+ posicion 1)))
        )
    )  
  
  ; Llamada inicial a check-fila.
  (check-fila board 0)
  )
