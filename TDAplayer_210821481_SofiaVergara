#lang racket

; Descripción: Crea un nuevo jugador y lo agrega a la lista de jugadores.
; Dom: id (int) X name (string) X color (string) X wins (int) X losses (int) X draws (int) X remaining-pieces (int).
; Rec: El jugador creado (player).
; Tipo recursión: No aplica.

; Función para crear un jugador con validación de tipos.
(define (player id name color wins losses draws remaining-pieces)
  (cond
    [(not (integer? id)) (error "id debe ser un número entero")]
    [(not (string? name)) (error "name debe ser una cadena de caracteres")]
    [(not (string? color)) (error "color debe ser una cadena de caracteres")]
    [(not (integer? wins)) (error "wins debe ser un número entero")]
    [(not (integer? losses)) (error "losses debe ser un número entero")]
    [(not (integer? draws)) (error "draws debe ser un número entero")]
    [(not (integer? remaining-pieces)) (error "remaining-pieces debe ser un número entero")]
    [else (list id name color wins losses draws remaining-pieces)]))
